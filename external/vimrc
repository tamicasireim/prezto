inoremap jk <ESC>
set nocompatible
filetype plugin on
let mapleader=" " "set leader to space

augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }


" Plugins with Vim Plug
" {{{
call plug#begin('~/.vim/plugged')

" navigation (fzf, ctrlp){{{
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all', 'on': 'FZF' }
map <Leader>f :FZF<CR>

" ctrlp
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'ctrlpvim/ctrlp.vim', {'on': ['CtrlP', 'CtrlPMRUFiles', 'CtrlPLine']}
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
nnoremap <Leader>p :CtrlP<CR>
nnoremap <Leader>m :CtrlPMRUFiles<CR>
nnoremap <Leader>l :CtrlPLine<CR>
" nnoremap <Leader>b :CtrlPBuffer<CR>
nnoremap <leader>l :ls<CR>:b<space>
" }}}

" Plugins d'édition de texte {{{
" provides '.' command for plugins
Plug 'tpope/vim-repeat'

" provides the exchange command
" cxMOTION then cxMOTION
Plug 'tommcdo/vim-exchange'

" provides surround command
" cs to change surround, ys to add surround, ds... S in visual mode
Plug 'tpope/vim-surround'

" change the way i[, i{ works. You don't have to be inside a parenthesis for
" it to work, it automatically select the correct one.
Plug 'wellle/targets.vim'

" when you type f, F etc, just keep hitting f instead of , or ;
Plug 'rhysd/clever-f.vim'
"
" Comment stuff in / out
" gcc, gcMOTION, gcp paragraph
" :7,17Commentary
Plug 'tpope/vim-commentary'

" provides some key bindings in insert mode
Plug 'tpope/vim-rsi'

" C-n, C-p, C-x to multi-cursor
Plug 'terryma/vim-multiple-cursors'

" gl, gL<object><critère> pour aligner du texte
Plug 'tommcdo/vim-lion'

" snippet management
Plug 'honza/vim-snippets'
" snip mate and dependencies
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'

imap <m-n> <Plug>snipMateNextOrTrigger
smap <m-n> <Plug>snipMateNextOrTrigger
" imap <m-p> <Plug>snipMateBack
smap <m-p> <Plug>snipMateBack
" }}}

" cosmétique (Airline, gitgutter) {{{
" list of themes
" https://github.com/vim-airline/vim-airline/wiki/Screenshots
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_powerline_fonts = 1
let g:airline_theme='kalisi'
set laststatus=2

" change mode display
let g:airline_mode_map = {
            \ '__' : '-',
            \ 'n'  : 'N',
            \ 'i'  : 'I',
            \ 'R'  : 'R',
            \ 'c'  : 'C',
            \ 'v'  : 'V',
            \ 'V'  : 'V',
            \ '' : 'V',
            \ 's'  : 'S',
            \ 'S'  : 'S',
            \ '' : 'S',
            \ }

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 0
let g:airline#extensions#tabline#buffer_min_count = 2

let g:airline#extensions#tabline#tabs_label = 't'
let g:airline#extensions#tabline#buffers_label = 'b'
Plug 'airblade/vim-gitgutter'
set updatetime=250

Plug 'edkolev/tmuxline.vim'
" }}}

" some theme {{{
Plug 'morhetz/gruvbox'
Plug 'muellan/am-colors'
Plug 'junegunn/seoul256.vim'
Plug 'freeo/vim-kalisi'
" }}}

" :Ack [options] {pattern} [{directories}]
" ? to display keys
Plug 'mileszs/ack.vim', {'on': 'Ack'}
nnoremap <Leader>a :Ack!<Space>
" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

" vimux provides :VimuxRunCommand and :VimuxRunLastCommand
Plug 'benmills/vimux'

" vim wiki
Plug 'vimwiki/vimwiki'
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

" syntax plugins
" {{{
Plug 'vim-scripts/fountain.vim'
Plug 'PotatoesMaster/i3-vim-syntax'
"}}}

Plug 'junegunn/goyo.vim', { 'for': ['markdown', 'latex', 'tex'] }
Plug 'junegunn/limelight.vim'
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

Plug 'tpope/vim-fugitive'



call plug#end()
" }}}

" UI changes
" {{{
syntax on
set number " Show line number
set background=dark
set t_Co=256
try
    colorscheme kalisi
catch
    colorscheme elflord
endtry


set cursorline          " highlight current line
" disable cursorline on insert mode
autocmd InsertEnter * set nocul
autocmd InsertLeave * set cul

set relativenumber

" change cursor style according to mode (works for VTE Terminals (urxvt...))
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" }}}

" Vim Behaviour tweaking
"{{{
filetype indent on      " load filetype-specific indent files
set noswapfile   " No swap file
set lazyredraw   " Vim won't redraw sreen while executing Macro
set shortmess+=I "The intro message won't display

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2
set mouse=a "Enable mouse for all modes

" indenting
" Vim will keep current identing if no filetype-specific
" indenting specified
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4

set wildmenu " Better command-line completion
set wildmode=longest,full
set autoread " vim will autoread when a file is changed from outside

" vim will hide buffers without prompting annoying stuff and will autosave
" when switching buffers.
set hidden
set autowrite

" Split behaviour
set splitbelow
set splitright

" omni complete with <C-x><C-o>
" <C-x><C-l> pour compléter une ligne
" <C-x><C-f> pour compléter le nom de fichier
set omnifunc=syntaxcomplete#Complete

" folding {{{
set foldenable        " enable folding
set foldlevelstart=10 "openmost folds by default
set foldnestmax=10    " 10 nested fold max

set foldmethod=indent " see help foldmethod for others methods
" }}}

" Search Parameters
"{{{
set gdefault   " vim will replace all occurencies in line by default
set ignorecase " search will ignore case
set smartcase  " if there is capital letter, vim will take case in count
set incsearch  " research as you type
" Search is highlightened and Leader L will clear highlighting
set hlsearch
map <Leader>i :noh<CR>:<CR>
"}}}

" changing the backspace behaviour : deleting indent, start of line...
set backspace=indent,eol,start

autocmd FileType gitcommit exec 'au VimEnter * startinsert'

set modelines=1 " make vim look at the end of file for indent parameters etc.
" }}}

function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

" vim:foldmethod=marker:foldlevel=0
