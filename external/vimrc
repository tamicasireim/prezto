inoremap jk <ESC>
inoremap <c-j> <ESC>
set nocompatible
filetype plugin on
let mapleader=" " "set leader to space

augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" open the quickfix window automatically
augroup automaticquickfix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost    l* lwindow
augroup END

" Plugins with Vim Plug
" {{{
" autoinstall vim plug
if empty(glob("~/.vim/autoload/plug.vim"))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    auto VimEnter * PlugInstall
endif
call plug#begin('~/.vim/plugged')

" testing some plugins

Plug 'unblevable/quick-scope' " highlight caracters for fFtT

Plug 'tpope/vim-unimpaired' " add some mapping
" [<space> new line        | [f next / previous file in dir.
" [b :bnext, [B :bfirst    | cos toggle spell
" cob toggle dark/light bg | con numbers
" cor relative number
" =p past & reindent       | yo insert in paste mode
" [y escape string C style
nmap é [
nmap è ]
omap é [
omap è ]
xmap é [
xmap è ]

Plug 'tpope/vim-eunuch' " add some commands
" :SudoWrite, :Rename/:Move
" :Delete / :Unlink

Plug 'vim-scripts/matchit.zip' " extends %

Plug 'tpope/vim-vinegar'



""""""""""""""""""""""""""""""""""
"""""" Navigation """"""""""""""""
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'}
Plug 'junegunn/fzf.vim'
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>F :GFiles<CR>
nnoremap <Leader>h :History<CR>
nnoremap <Leader>/ :History/<CR>
nnoremap <Leader>: :History:<CR>
nnoremap <Leader>a :Ag<CR>
nnoremap <Leader>b :Buffer<CR>
nnoremap <Leader>l :BLines<CR>
nnoremap <Leader>L :Lines<CR>
nnoremap <Leader>t :BTags<CR>
nnoremap <Leader>T :Tags<CR>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-L> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-L> <plug>(fzf-complete-line)

nnoremap <BS> <C-^>

""""""""""""""""""""""""""""""""""
"""""" Edition de texte  """""""""
""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-repeat'             " provides '.' command for plugins

Plug 'tommcdo/vim-exchange'         " provides the exchange command
                                    " cxMOTION then cxMOTION

Plug 'tpope/vim-surround'           " provides surround command
                                    " cs to change surround, ys to add surround,
                                    "ds... S in visual mode

Plug 'tpope/vim-commentary'         " Comment stuff in / out
                                    " gcc, gcMOTION, gcp paragraph
                                    " :7,17Commentary

Plug 'tpope/vim-rsi'                " provides some key bindings in insert mode

Plug 'tommcdo/vim-lion'             " gl, gL<object><critère> pour aligner du texte

Plug 'vim-scripts/ReplaceWithRegister' "provides gr{motion} grr

" snippet management
Plug 'honza/vim-snippets'
" snip mate and dependencies
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
imap <m-n> <Plug>snipMateNextOrTrigger
smap <m-n> <Plug>snipMateNextOrTrigger
" imap <m-p> <Plug>snipMateBack
smap <m-p> <Plug>snipMateBack

""""""""""""""""""""""""""""""""""
"""""" Comestic   """"""""""""""""
""""""""""""""""""""""""""""""""""

" Airline
" Plug 'itchyny/lightline.vim'
set laststatus=2
Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes' " provided by alduin theme
let g:airline_powerline_fonts = 1
let g:airline_theme='gruvbox'
let g:airline_mode_map = {
            \ '__' : '-',
            \ 'n'  : 'N',
            \ 'i'  : 'I',
            \ 'R'  : 'R',
            \ 'c'  : 'C',
            \ 'v'  : 'V',
            \ 'V'  : 'V',
            \ '' : 'V',
            \ 's'  : 'S',
            \ 'S'  : 'S',
            \ '' : 'S',
            \ }

" tabline config
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#show_tabs = 0
" let g:airline#extensions#tabline#buffer_min_count = 2
" let g:airline#extensions#tabline#tabs_label = 't'
" let g:airline#extensions#tabline#buffers_label = 'b'

let g:airline_extensions = ['branch', 'vimtex']

Plug 'edkolev/tmuxline.vim' " make tmux line looks like airline

" Some colorschemes
Plug 'morhetz/gruvbox'
let g:gruvbox_italic=1
let g:gruvbox_contrast_dark='hard'
let g:gruvbox_contrast_light='hard'
Plug 'muellan/am-colors'
" let g:seoul256_background = 233
" let g:seoul256_light_background = 252
Plug 'junegunn/seoul256.vim'
Plug 'freeo/vim-kalisi'
Plug 'AlessandroYorba/Alduin'


" distraction free editing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!


""""""""""""""""""""""""""""""""""
"""""" syntax   """"""""""""""""""
""""""""""""""""""""""""""""""""""

Plug 'vim-scripts/fountain.vim'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'vim-pandoc/vim-pandoc'
let g:pandoc#spell#enabled=0
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'lervag/vimtex', {'for': ['latex', 'tex']}

""""""""""""""""""""""""""""""""""
"""""" Version management   """"""
""""""""""""""""""""""""""""""""""
" Plug 'airblade/vim-gitgutter' " Git gutter
" set updatetime=250

Plug 'tpope/vim-fugitive'     " Thanks tpope

Plug 'jreybert/vimagit', {'on' : 'Magit'}       " bring magit to vim

""""""""""""""""""""""""""""""""""
"""""" others   """"""""""""""""""
""""""""""""""""""""""""""""""""""

" vimux provides :VimuxRunCommand and :VimuxRunLastCommand
Plug 'benmills/vimux'

" vim wiki
Plug 'vimwiki/vimwiki'
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]

call plug#end()
" }}}

" UI changes
" {{{
syntax on
set number " Show line number
set background=dark
set t_Co=256
" set ctermbg=

try
    colorscheme seoul256
catch
    colorscheme elflord
endtry


set cursorline          " highlight current line
" disable cursorline on insert mode
autocmd InsertEnter * set nocul
autocmd InsertLeave * set cul

set relativenumber

" change cursor style according to mode (works for VTE Terminals (urxvt...))
if empty($TMUX)
    let &t_SI = "\<Esc>[6 q" " insert mode
    let &t_SR = "\<Esc>[4 q" " replace mode
    let &t_EI = "\<Esc>[2 q" " normal mode block
else
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>[6 q\<Esc>\\"
    let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>[4 q\<Esc>\\" " replace mode
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>[2 q\<Esc>\\"
endif
" }}}

" Vim Behaviour tweaking
"{{{
nnoremap Y y$

filetype indent on      " load filetype-specific indent files
set noswapfile   " No swap file
set lazyredraw   " Vim won't redraw sreen while executing Macro
set shortmess+=I "The intro message won't display

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2
set mouse=a "Enable mouse for all modes

" indenting
" Vim will keep current identing if no filetype-specific
" indenting specified
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4

set wildmenu " Better command-line completion
set wildmode=longest,full
set autoread " vim will autoread when a file is changed from outside

set path+=** " recursive searching for :find
" set tags+=~/mytags

" vim will hide buffers without prompting annoying stuff and will autosave
" when switching buffers.
set hidden
set autowrite

" Split behaviour
set splitbelow
set splitright

" folding
set foldenable        " enable folding
set foldlevelstart=10 "openmost folds by default
set foldnestmax=3    " 10 nested fold max
set foldmethod=indent " see help foldmethod for others methods

" Search Parameters
"{{{
set gdefault   " vim will replace all occurencies in line by default
set ignorecase " search will ignore case
set smartcase  " if there is capital letter, vim will take case in count
set incsearch  " research as you type
" Search is highlightened and Leader L will clear highlighting
set hlsearch
map <Leader>n :noh<CR>:<CR>
" https://robots.thoughtbot.com/faster-grepping-in-vim
" The Silver Searcher
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor
endif
" autocmd QuickFixCmdPost *grep* cwindow
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
"}}}

" changing the backspace behaviour : deleting indent, start of line...
set backspace=indent,eol,start

autocmd FileType gitcommit exec 'au VimEnter * startinsert'

set modelines=1 " make vim look at the end of file for indent parameters etc.
" }}}

function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

function! EditVimrc()
    e ~/.vimrc
endfunction

au BufNewFile,BufRead *.launch set filetype=xml

" vim:foldmethod=marker:foldlevel=0:foldnestmax=0
